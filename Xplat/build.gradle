plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev'
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg') // TODO: convert from accesswidener
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

dependencies {
    compileOnly group: 'net.fabricmc', name: 'sponge-mixin', version: '0.15.2+mixin.0.8.7'
    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.4.1'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.4.1'

    compileOnly group: 'vazkii.patchouli', name: 'Patchouli-xplat', version: patchouli_version

    compileOnly group: 'com.unascribed', name: 'ears-api', version: ears_version

    compileOnly group: 'mezz.jei', name:"jei-${minecraft_version}-common-api", version: jei_version
    compileOnly "dev.emi:emi-xplat-mojmap:${emi_version}:api"

    compileOnly group: 'org.jetbrains', name: 'annotations', version: '26.0.2'
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.files
}
